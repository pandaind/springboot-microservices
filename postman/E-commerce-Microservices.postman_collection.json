{
  "info": {
    "name": "E-commerce Microservices API Collection",
    "description": "Comprehensive Postman collection for testing all microservices through the API Gateway. All order and payment services are now working properly. Order creation requests no longer include amount field (calculated automatically from products). Collection requires `reference` field for order creation.",
    "version": "2.1.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic values for testing",
          "pm.globals.set('timestamp', Date.now());"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "description": "‚úÖ ACTIVE: API Gateway base URL - All requests route through here"
    },
    {
      "key": "gateway_url", 
      "value": "http://localhost:8080",
      "description": "‚úÖ ACTIVE: API Gateway URL - Primary endpoint for all microservices"
    },
    {
      "key": "customer_service_url",
      "value": "http://localhost:8090",
      "description": "‚ùå DEPRECATED: Direct customer service URL - Use gateway_url instead"
    },
    {
      "key": "product_service_url",
      "value": "http://localhost:8050", 
      "description": "‚ùå DEPRECATED: Direct product service URL - Use gateway_url instead"
    },
    {
      "key": "order_service_url",
      "value": "http://localhost:8070",
      "description": "‚ùå DEPRECATED: Direct order service URL - Use gateway_url instead"
    },
    {
      "key": "payment_service_url",
      "value": "http://localhost:8060",
      "description": "‚ùå DEPRECATED: Direct payment service URL - Use gateway_url instead"
    },
    {
      "key": "customer_id",
      "value": ""
    },
    {
      "key": "product_id",
      "value": ""
    },
    {
      "key": "order_id",
      "value": ""
    },
    {
      "key": "payment_id",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "üè• Health Checks & Service Status",
      "description": "Health checks for all microservices - Run these first to verify service availability",
      "item": [
        {
          "name": "Config Server Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{config_server_url}}/actuator/health",
              "host": [
                "{{config_server_url}}"
              ],
              "path": [
                "actuator",
                "health"
              ]
            },
            "description": "Verify Config Server is running and healthy"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Config Server is UP', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('UP');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Discovery Server Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{discovery_server_url}}/actuator/health",
              "host": [
                "{{discovery_server_url}}"
              ],
              "path": [
                "actuator",
                "health"
              ]
            },
            "description": "Verify Eureka Discovery Server is running"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Discovery Server is UP', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('UP');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Customer Service Health ‚úÖ",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{customer_service_url}}/actuator/health",
              "host": [
                "{{customer_service_url}}"
              ],
              "path": [
                "actuator",
                "health"
              ]
            },
            "description": "Verify Customer Service is running and connected to MongoDB"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Customer Service is UP', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('UP');",
                  "});",
                  "",
                  "pm.test('MongoDB connection is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.components.mongo.status).to.eql('UP');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Product Service Health ‚úÖ",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{product_service_url}}/actuator/health",
              "host": [
                "{{product_service_url}}"
              ],
              "path": [
                "actuator",
                "health"
              ]
            },
            "description": "Verify Product Service is running and connected to PostgreSQL"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product Service is UP', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('UP');",
                  "});",
                  "",
                  "pm.test('Database connection is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.components.db.status).to.eql('UP');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Gateway Service Test ‚úÖ",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/actuator/health",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "actuator",
                "health"
              ]
            },
            "description": "Test Gateway Service - All routing working correctly"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Gateway Service responds', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Gateway routing working', function () {",
                  "    console.log('‚úÖ Gateway routing is working correctly!');",
                  "    console.log('‚úÖ All services accessible through gateway: ' + pm.environment.get('gateway_url'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Customer Service ‚úÖ",
      "description": "Customer management endpoints - Routes through Gateway at {{gateway_url}}/api/v1/customers/*",
      "item": [
        {
          "name": "Create Customer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"John\",\n  \"lastname\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"houseNumber\": \"1A\",\n    \"zipCode\": \"12345\"\n  }\n}"
            },
            "url": {
              "raw": "{{gateway_url}}/api/v1/customers",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "customers"
              ]
            },
            "description": "Create a new customer in the system"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains customer ID', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.not.be.empty;",
                  "    pm.globals.set('customer_id', responseText.replace(/\"/g, ''));",
                  "});",
                  "",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Customers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/customers",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "customers"
              ]
            },
            "description": "‚úÖ WORKING: Retrieve all customers through API Gateway"
          },
          "response": [
            {
              "name": "Successful Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/customers",
                  "host": ["{{gateway_url}}"],
                  "path": ["api", "v1", "customers"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"id\": \"68bc23ee625bd0556832d204\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"address\": {\n      \"street\": \"123 Main St\",\n      \"houseNumber\": \"1A\",\n      \"zipCode\": \"12345\"\n    }\n  },\n  {\n    \"id\": \"68bc25d60d856b3bcfbbc003\",\n    \"firstname\": \"Alice\",\n    \"lastname\": \"Johnson\",\n    \"email\": \"alice.johnson@example.com\",\n    \"address\": {\n      \"street\": \"456 Oak Ave\",\n      \"houseNumber\": \"2B\",\n      \"zipCode\": \"67890\"\n    }\n  }\n]"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Customer by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/customers/{{customer_id}}",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "customers",
                "{{customer_id}}"
              ]
            },
            "description": "Retrieve a specific customer by their ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains customer data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('firstname');",
                  "    pm.expect(jsonData).to.have.property('lastname');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Customer Exists",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/customers/exists/{{customer_id}}",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "customers",
                "exists",
                "{{customer_id}}"
              ]
            },
            "description": "Check if a customer exists in the system"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is boolean', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText === 'true' || responseText === 'false').to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Customer",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"{{customer_id}}\",\n  \"firstname\": \"John\",\n  \"lastname\": \"Smith\",\n  \"email\": \"john.smith@example.com\",\n  \"address\": {\n    \"street\": \"456 Oak Ave\",\n    \"houseNumber\": \"2B\",\n    \"zipCode\": \"54321\"\n  }\n}"
            },
            "url": {
              "raw": "{{gateway_url}}/api/v1/customers",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "customers"
              ]
            },
            "description": "Update an existing customer's information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 202', function () {",
                  "    pm.response.to.have.status(202);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
            "name": "Product Service ‚úÖ",
      "description": "Product catalog management endpoints - Routes through Gateway at {{gateway_url}}/api/v1/products/*",
      "item": [
        {
          "name": "Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Laptop\",\n  \"description\": \"High-performance laptop for professionals\",\n  \"availableQuantity\": 50,\n  \"price\": 1299.99,\n  \"categoryId\": 1\n}"
            },
            "url": {
              "raw": "{{gateway_url}}/api/v1/products",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "products"
              ]
            },
            "description": "Create a new product in the catalog"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains product ID', function () {",
                  "    const productId = pm.response.json();",
                  "    pm.expect(productId).to.be.a('number');",
                  "    pm.globals.set('product_id', productId);",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/products",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "products"
              ]
            },
            "description": "Retrieve all products from the catalog"
          },
          "response": [
            {
              "name": "Success Response - Products List",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/products",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "products"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Mechanical Keyboard 1\",\n        \"description\": \"High-quality mechanical keyboard for developers\",\n        \"availableQuantity\": 25,\n        \"price\": 129.99,\n        \"categoryId\": 51\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Wireless Mouse Pro\",\n        \"description\": \"Ergonomic wireless mouse with precision tracking\",\n        \"availableQuantity\": 40,\n        \"price\": 79.99,\n        \"categoryId\": 51\n    }\n]"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Each product has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const product = jsonData[0];",
                  "        pm.expect(product).to.have.property('id');",
                  "        pm.expect(product).to.have.property('name');",
                  "        pm.expect(product).to.have.property('price');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/products/{{product_id}}",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "products",
                "{{product_id}}"
              ]
            },
            "description": "Retrieve a specific product by its ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains product data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('price');",
                  "    pm.expect(jsonData).to.have.property('availableQuantity');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Purchase Products",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"productId\": {{product_id}},\n    \"quantity\": 2\n  }\n]"
            },
            "url": {
              "raw": "{{gateway_url}}/api/v1/products/purchase",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "products",
                "purchase"
              ]
            },
            "description": "Purchase products (reduce inventory)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array of purchase responses', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('productId');",
                  "        pm.expect(jsonData[0]).to.have.property('quantity');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Order Service",
      "description": "Order management endpoints - Routes through Gateway at {{gateway_url}}/api/v1/orders/*",
      "item": [
        {
          "name": "Create Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reference\": \"ORD-{{$timestamp}}\",\n  \"paymentMethod\": \"CREDIT_CARD\",\n  \"customerId\": \"{{customer_id}}\",\n  \"products\": [\n    {\n      \"productId\": {{product_id}},\n      \"quantity\": 2\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{gateway_url}}/api/v1/orders",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "orders"
              ]
            },
            "description": "Create a new order in the system"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains order ID', function () {",
                  "    const orderId = pm.response.json();",
                  "    pm.expect(orderId).to.be.a('number');",
                  "    pm.globals.set('order_id', orderId);",
                  "});",
                  "",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/orders",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "orders"
              ]
            },
            "description": "Retrieve all orders from the system"
          },
          "response": [
            {
              "name": "Success Response - Orders List (Empty)",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/orders",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orders"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[]"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Each order has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const order = jsonData[0];",
                  "        pm.expect(order).to.have.property('id');",
                  "        pm.expect(order).to.have.property('reference');",
                  "        pm.expect(order).to.have.property('amount');",
                  "        pm.expect(order).to.have.property('customerId');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/orders/{{order_id}}",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "orders",
                "{{order_id}}"
              ]
            },
            "description": "Retrieve a specific order by its ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains order data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('reference');",
                  "    pm.expect(jsonData).to.have.property('amount');",
                  "    pm.expect(jsonData).to.have.property('customerId');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Order Lines by Order ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/order-lines/order/{{order_id}}",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "order-lines",
                "order",
                "{{order_id}}"
              ]
            },
            "description": "Retrieve order lines for a specific order"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array of order lines', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Payment Service",
      "description": "Payment processing endpoints - Routes through Gateway at {{gateway_url}}/api/v1/payments/*",
      "item": [
        {
          "name": "Create Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 2599.98,\n  \"paymentMethod\": \"CREDIT_CARD\",\n  \"orderId\": {{order_id}},\n  \"orderReference\": \"ORD-{{$timestamp}}\",\n  \"customer\": {\n    \"id\": \"{{customer_id}}\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Smith\",\n    \"email\": \"john.smith@example.com\"\n  }\n}"
            },
            "url": {
              "raw": "{{gateway_url}}/api/v1/payments",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "payments"
              ]
            },
            "description": "Process a payment for an order"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains payment ID', function () {",
                  "    const paymentId = pm.response.json();",
                  "    pm.expect(paymentId).to.be.a('number');",
                  "    pm.globals.set('payment_id', paymentId);",
                  "});",
                  "",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üß™ Test Flows & Business Scenarios",
      "description": "Comprehensive end-to-end testing flows for complete application functionality",
      "item": [
        {
          "name": "üõí Complete Purchase Flow (Happy Path)",
          "description": "Full e-commerce flow: Customer ‚Üí Product ‚Üí Order ‚Üí Payment ‚Üí Verification",
          "item": [
            {
              "name": "1. Create Customer",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstname\": \"Alice\",\n  \"lastname\": \"Johnson\",\n  \"email\": \"alice.johnson@example.com\",\n  \"address\": {\n    \"street\": \"789 Pine St\",\n    \"houseNumber\": \"3C\",\n    \"zipCode\": \"98765\"\n  }\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/customers",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Customer created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const customerId = pm.response.text().replace(/\"/g, '');",
                      "    pm.globals.set('flow_customer_id', customerId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "2. Create Product",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Smartphone\",\n  \"description\": \"Latest smartphone with advanced features\",\n  \"availableQuantity\": 100,\n  \"price\": 899.99,\n  \"categoryId\": 201\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/products",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "products"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Product created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const productId = pm.response.json();",
                      "    pm.globals.set('flow_product_id', productId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "3. Create Order",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reference\": \"FLOW-ORD-{{$timestamp}}\",\n  \"paymentMethod\": \"PAYPAL\",\n  \"customerId\": \"{{flow_customer_id}}\",\n  \"products\": [\n    {\n      \"productId\": {{flow_product_id}},\n      \"quantity\": 2\n    }\n  ]\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/orders",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orders"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const orderId = pm.response.json();",
                      "    pm.globals.set('flow_order_id', orderId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "4. Process Payment",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 1799.98,\n  \"paymentMethod\": \"PAYPAL\",\n  \"orderId\": {{flow_order_id}},\n  \"orderReference\": \"FLOW-ORD-{{$timestamp}}\",\n  \"customer\": {\n    \"id\": \"{{flow_customer_id}}\",\n    \"firstname\": \"Alice\",\n    \"lastname\": \"Johnson\",\n    \"email\": \"alice.johnson@example.com\"\n  }\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/payments",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "payments"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Payment processed successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const paymentId = pm.response.json();",
                      "    pm.globals.set('flow_payment_id', paymentId);",
                      "});",
                      "",
                      "pm.test('Complete flow validation', function () {",
                      "    pm.expect(pm.globals.get('flow_customer_id')).to.not.be.empty;",
                      "    pm.expect(pm.globals.get('flow_product_id')).to.not.be.empty;",
                      "    pm.expect(pm.globals.get('flow_order_id')).to.not.be.empty;",
                      "    pm.expect(pm.globals.get('flow_payment_id')).to.not.be.empty;",
                      "    console.log('Complete e-commerce flow executed successfully!');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "5. Verify Order Details",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/orders/{{flow_order_id}}",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orders",
                    "{{flow_order_id}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Order verification successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const order = pm.response.json();",
                      "    pm.expect(order.customerId).to.equal(pm.globals.get('flow_customer_id'));",
                      "    pm.expect(order.amount).to.equal(1799.98);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "6. Verify Order Lines",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/order-lines/order/{{flow_order_id}}",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "order-lines",
                    "order",
                    "{{flow_order_id}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Order lines verification successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const orderLines = pm.response.json();",
                      "    pm.expect(orderLines).to.be.an('array');",
                      "    pm.expect(orderLines.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üè™ Inventory Management Flow",
          "description": "Test product inventory and stock management scenarios",
          "item": [
            {
              "name": "1. Create Multiple Products",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Gaming Laptop\",\n  \"description\": \"High-performance gaming laptop with RTX graphics\",\n  \"availableQuantity\": 15,\n  \"price\": 1899.99,\n  \"categoryId\": 1\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/products",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "products"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Gaming laptop created', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const productId = pm.response.json();",
                      "    pm.globals.set('gaming_laptop_id', productId);",
                      "    console.log('Gaming Laptop ID: ' + productId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "2. Create Office Equipment",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Ergonomic Office Chair\",\n  \"description\": \"Comfortable ergonomic chair for office work\",\n  \"availableQuantity\": 30,\n  \"price\": 299.99,\n  \"categoryId\": 101\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/products",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "products"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Office chair created', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const productId = pm.response.json();",
                      "    pm.globals.set('office_chair_id', productId);",
                      "    console.log('Office Chair ID: ' + productId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "3. Verify Product Catalog",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/products",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "products"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Product catalog has items', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const products = pm.response.json();",
                      "    pm.expect(products).to.be.an('array');",
                      "    pm.expect(products.length).to.be.greaterThan(0);",
                      "    console.log('Total products in catalog: ' + products.length);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üë• Multi-Customer Scenario",
          "description": "Test multiple customers and concurrent operations",
          "item": [
            {
              "name": "1. Create Customer A (Individual)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstname\": \"Bob\",\n  \"lastname\": \"Smith\",\n  \"email\": \"bob.smith@example.com\",\n  \"address\": {\n    \"street\": \"456 Oak Avenue\",\n    \"houseNumber\": \"12B\",\n    \"zipCode\": \"54321\"\n  }\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/customers",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Customer A created', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const customerId = pm.response.text().replace(/\"/g, '');",
                      "    pm.globals.set('customer_a_id', customerId);",
                      "    console.log('Customer A ID: ' + customerId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "2. Create Customer B (Business)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstname\": \"Sarah\",\n  \"lastname\": \"Wilson\",\n  \"email\": \"sarah.wilson@company.com\",\n  \"address\": {\n    \"street\": \"789 Business Blvd\",\n    \"houseNumber\": \"Suite 200\",\n    \"zipCode\": \"67890\"\n  }\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/customers",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Customer B created', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const customerId = pm.response.text().replace(/\"/g, '');",
                      "    pm.globals.set('customer_b_id', customerId);",
                      "    console.log('Customer B ID: ' + customerId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "3. Customer A Orders Gaming Laptop",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reference\": \"ORD-GAMING-{{$timestamp}}\",\n  \"paymentMethod\": \"CREDIT_CARD\",\n  \"customerId\": \"{{customer_a_id}}\",\n  \"products\": [\n    {\n      \"productId\": {{gaming_laptop_id}},\n      \"quantity\": 1\n    }\n  ]\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/orders",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orders"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Gaming laptop order created', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const orderId = pm.response.json();",
                      "    pm.globals.set('order_gaming_id', orderId);",
                      "    console.log('Gaming Order ID: ' + orderId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "4. Customer B Orders Office Equipment",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reference\": \"ORD-OFFICE-{{$timestamp}}\",\n  \"paymentMethod\": \"PAYPAL\",\n  \"customerId\": \"{{customer_b_id}}\",\n  \"products\": [\n    {\n      \"productId\": {{office_chair_id}},\n      \"quantity\": 2\n    }\n  ]\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/orders",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orders"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Office equipment order created', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const orderId = pm.response.json();",
                      "    pm.globals.set('order_office_id', orderId);",
                      "    console.log('Office Order ID: ' + orderId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "5. Process Both Payments",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"orderId\": {{order_gaming_id}},\n  \"amount\": 1899.99,\n  \"paymentMethod\": \"CREDIT_CARD\",\n  \"orderReference\": \"ORD-GAMING-{{$timestamp}}\",\n  \"customer\": {\n    \"id\": \"{{customer_a_id}}\",\n    \"firstname\": \"Bob\",\n    \"lastname\": \"Smith\",\n    \"email\": \"bob.smith@example.com\"\n  }\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/payments",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "payments"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Gaming laptop payment processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const paymentId = pm.response.json();",
                      "    pm.globals.set('payment_gaming_id', paymentId);",
                      "    console.log('Gaming Payment ID: ' + paymentId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "5b. Process Office Equipment Payment",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"orderId\": {{order_office_id}},\n  \"amount\": 599.98,\n  \"paymentMethod\": \"PAYPAL\",\n  \"orderReference\": \"ORD-OFFICE-{{$timestamp}}\",\n  \"customer\": {\n    \"id\": \"{{customer_b_id}}\",\n    \"firstname\": \"Carol\",\n    \"lastname\": \"Johnson\",\n    \"email\": \"carol.johnson@business.com\"\n  }\n}"
                },
                "url": {
                  "raw": "{{gateway_url}}/api/v1/payments",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "payments"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Office equipment payment processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const paymentId = pm.response.json();",
                      "    pm.globals.set('payment_office_id', paymentId);",
                      "    console.log('Office Payment ID: ' + paymentId);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "6. Verify All Orders",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/orders",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orders"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Multiple orders exist', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const orders = pm.response.json();",
                      "    pm.expect(orders).to.be.an('array');",
                      "    console.log('Total orders in system: ' + orders.length);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üîÑ Service Integration Flow",
          "description": "Test cross-service communication and data consistency",
          "item": [
            {
              "name": "1. Verify All Customers",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/customers",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Customer service responds', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const customers = pm.response.json();",
                      "    pm.expect(customers).to.be.an('array');",
                      "    console.log('‚úÖ Customer Service: ' + customers.length + ' customers');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "2. Verify All Products",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/products",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "products"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Product service responds', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const products = pm.response.json();",
                      "    pm.expect(products).to.be.an('array');",
                      "    console.log('‚úÖ Product Service: ' + products.length + ' products');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "3. Verify All Orders",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/orders",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orders"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Order service responds', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const orders = pm.response.json();",
                      "    pm.expect(orders).to.be.an('array');",
                      "    console.log('‚úÖ Order Service: ' + orders.length + ' orders');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "4. Gateway Load Balancing Test",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{gateway_url}}/api/v1/customers",
                  "host": [
                    "{{gateway_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Gateway routing works consistently', function () {",
                      "    pm.response.to.have.status(200);",
                      "    console.log('‚úÖ Gateway Load Balancing: Request ' + (pm.globals.get('load_test_count') || 1));",
                      "    pm.globals.set('load_test_count', (pm.globals.get('load_test_count') || 0) + 1);",
                      "});",
                      "",
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "‚ùå Error Scenarios & Edge Cases",
      "description": "Test error handling, validation, and edge case scenarios",
      "item": [
        {
          "name": "Invalid Customer Creation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"\",\n  \"lastname\": \"\",\n  \"email\": \"invalid-email\"\n}"
            },
            "url": {
              "raw": "{{gateway_url}}/api/v1/customers",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "customers"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Validation error returned', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Non-existent Customer",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/customers/non-existent-id",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "customers",
                "non-existent-id"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Customer not found', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Non-existent Product",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/products/99999",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "products",
                "99999"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product not found', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Order with Invalid Customer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reference\": \"ERROR-ORD-{{$timestamp}}\",\n  \"paymentMethod\": \"CREDIT_CARD\",\n  \"customerId\": \"invalid-customer-id\",\n  \"products\": [\n    {\n      \"productId\": 1,\n      \"quantity\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{gateway_url}}/api/v1/orders",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "orders"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order creation failed with invalid customer', function () {",
                  "    pm.response.to.not.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ü©∫ Health Checks & Monitoring",
      "description": "Health check endpoints for monitoring service status",
      "item": [
        {
          "name": "Gateway Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/actuator/health",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "actuator",
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const health = pm.response.json();",
                  "    pm.expect(health.status).to.equal('UP');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Customer Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{customer_service_url}}/actuator/health",
              "host": [
                "{{customer_service_url}}"
              ],
              "path": [
                "actuator",
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Customer service is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Product Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{product_service_url}}/actuator/health",
              "host": [
                "{{product_service_url}}"
              ],
              "path": [
                "actuator",
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product service is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "‚ö° Performance & Load Testing",
      "description": "Basic performance tests and load scenarios for gateway and services",
      "item": [
        {
          "name": "Gateway Response Time Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/customers",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "customers"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time under 1 second', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Status is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log('‚ö° Response Time: ' + pm.response.responseTime + 'ms');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Concurrent Customer Creation Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"Load{{$timestamp}}\",\n  \"lastname\": \"Test{{$randomInt}}\",\n  \"email\": \"loadtest{{$timestamp}}@example.com\",\n  \"address\": {\n    \"street\": \"{{$randomInt}} Test St\",\n    \"houseNumber\": \"{{$randomInt}}\",\n    \"zipCode\": \"{{$randomInt}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{gateway_url}}/api/v1/customers",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "customers"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Load test customer created', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Creation time acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "console.log('‚ö° Customer Creation Time: ' + pm.response.responseTime + 'ms');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Gateway Load Distribution Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gateway_url}}/api/v1/products",
              "host": [
                "{{gateway_url}}"
              ],
              "path": [
                "api",
                "v1",
                "products"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Load balancing works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Consistent response structure', function () {",
                  "    const products = pm.response.json();",
                  "    pm.expect(products).to.be.an('array');",
                  "});",
                  "",
                  "const requestNumber = pm.globals.get('load_distribution_count') || 1;",
                  "pm.globals.set('load_distribution_count', requestNumber + 1);",
                  "console.log('‚ö° Load Test Request #' + requestNumber + ' - Response Time: ' + pm.response.responseTime + 'ms');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}